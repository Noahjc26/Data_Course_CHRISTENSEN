y="Population",
x="Area",
caption="Midwest Demographics")
# Nifty!  So here's the full function call to make this plot:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Nifty!  So here's the full function call to make this plot:
ggplot(midwest, aes(x=area, y=poptotal)) + #global aesthetics for the rest of the lines
geom_point() + #geom point has inherited the x and y aesthetics from the global points above
geom_smooth() +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Nifty!  So here's the full function call to make this plot:
ggplot(midwest, aes(x=area, y=poptotal)) + #global aesthetics for the rest of the lines
geom_point() + #geom point has inherited the x and y aesthetics from the global points above
geom_smooth(method=lm) +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Nifty!  So here's the full function call to make this plot:
ggplot(midwest, aes(x=area, y=poptotal)) + #global aesthetics for the rest of the lines
geom_point() + #geom point has inherited the x and y aesthetics from the global points above
geom_smooth(method=lm) +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Change color of points and line to static values:
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(color="steelblue",size=3) +
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
# Here's where ggplot gets really cool...
# Suppose if we want the color to change based on another column in the source dataset,
# we can specify "color" inside the "aesthetic" aes() function.
p3 <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")
p3
# Don't like those colors?
p3 + scale_color_brewer(palette = "Set1")
p2+p3
mypallette <- c("#343356","#b23590","#a35929","#4a5090","#4a5")
# Don't like those colors?
p3 + scale_color_brewer(palette = "mypallette")
p3 + scale_color_manual(mypallette)
# Don't like those colors?
p3 + scale_color_brewer(palette = "Set1")
p3 + scale_color_manual(mypallette)
p3 + scale_color_manual(values=mypallette)
mypallette <- c("#343356","#b23590","#a35929","#4a5090","#4a5")
p3 + scale_color_manual(values=mypallette)
mypallette <- c("#343356","#b23590","#a35929","#4a5090","#4000a5")
p3 + scale_color_manual(values=mypallette)
library(RColorBrewer)
library(RColorBrewer)
# Want more color choices? You can check them out in the RColorBrewer package, or even make your own
library(RColorBrewer)
brewer.pal.info
# Make your own and take a peek at it:
library(colorblindr)
pal = c("#c4a113","#c1593c","#643d91","#820616","#477887","#688e52",
"#12aa91","#705f36","#8997b2","#753c2b","#3c3e44","#b3bf2d",
"#82b2a4","#894e7d","#a17fc1","#262a8e","#abb5b5","#000000")
palette_plot(pal)
# You can even check to see if your color choices would work for someone who has colorblindness...
cvd_grid(palette_plot(pal))
# Our plot with my custom color palette
p3 + scale_color_manual(values=pal)
# Other neat tricks:
p3 + scale_x_reverse()
p3 + theme_minimal()
p3 + theme_dark()
# You can also transform your data right in ggplot:
p4 = ggplot(midwest, aes(x=area/max(midwest$area), y=log10(poptotal))) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
labs(title="Area Vs Population", subtitle="From midwest dataset", color = "State",
y="log10 Population", x="Area (proportion of max)", caption="Midwest Demographics") +
theme_minimal() +
scale_color_manual(values=pal)
p4
# Want to divide up your plot into multiple ones based on a categorical variable?
p4 + facet_wrap(~ state)
# You can also transform your data right in ggplot:
p4 = ggplot(midwest, aes(x=area/max, y=log10(poptotal))) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
labs(title="Area Vs Population", subtitle="From midwest dataset", color = "State",
y="log10 Population", x="Area (proportion of max)", caption="Midwest Demographics") +
theme_minimal() +
scale_color_manual(values=pal)
p4
# You can also transform your data right in ggplot:
p4 = ggplot(midwest, aes(x=area/max(midwest$area), y=log10(poptotal))) +
geom_point(aes(color=state),size=3) +
geom_smooth(method="lm",color="firebrick") +
labs(title="Area Vs Population", subtitle="From midwest dataset", color = "State",
y="log10 Population", x="Area (proportion of max)", caption="Midwest Demographics") +
theme_minimal() +
scale_color_manual(values=pal)
p4
# Geoms for looking at a single variable's distribution:
library(carData)
install.packages("carData")
# Geoms for looking at a single variable's distribution:
library(carData)
data("MplsStops")
ggplot(MplsStops, aes(x=lat)) + geom_histogram() + labs(title = "Latitude of police stops in Minneapolis - 2017")
ggplot(MplsStops, aes(x=lat, fill = race)) + geom_density(alpha = .5) + labs(title = "Latitude of police stops in Minneapolis - 2017")
ggplot(MplsStops, aes(x=lat, fill = race)) + geom_histogram() + labs(title = "Latitude of police stops in Minneapolis - 2017") +
facet_wrap(~race)
ggplot(MplsStops, aes(x=lat, fill = race)) + geom_histogram() + labs(title = "Latitude of police stops in Minneapolis - 2017") +
facet_wrap(~racescales="free")
# Look at lat AND lon
ggplot(MplsStops, aes(x=lat,y=long,color=race)) + geom_point() + theme_minimal()
ggplot(MplsStops, aes(x=lat,y=long,color=race)) + geom_point() + theme_minimal() + facet_wrap(~race) # "overplotting!?"
ggplot(MplsStops,)
# Check out the issue with some random data
random_data = data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 11, 4.5) )
# quick look at data
plot(random_data$x)
# Look at lat AND lon
ggplot(MplsStops, aes(x=lat,y=long,color=race)) + geom_point() + theme_minimal()
ggsave()
ggsave("./ggsaveTest.png")
ggsave("./ggsaveTest.png",width = 6,height = 6, dpi = 300)
ggplot(state_max_fatality_rate,aes(x=Province_State,y=Maximum_Fatality_Ratio)) +
geom_bar()
library(tidyverse)
#1 Read into R Data Frame
CCD <- read.csv("./Exam_1/cleaned_covid_data.csv")
#2 Subset into data with only states starting with A
A_states<- subset(CCD, grepl("^A",Province_State))
#3 Plot
class(A_states$Last_Update)
ggplot(data=A_states,
aes(x=ymd(Last_Update),
y=Deaths,
)) +
geom_point(alpha=.5,
size=.2) +
facet_wrap(~Province_State,
scales="free") +
geom_smooth(method = "lm",
se = FALSE,
) +
labs(x="DATE (year-month-day)",
y="Number of Deaths")
#4 Peak Case_Fatality_Ratio
#creating first temporary data frame to find max Case_Fatality_Ratio, removing NA, and changing column name
fatality_rate_temp1 <- CCD %>%
group_by(Province_State) %>%
filter(Case_Fatality_Ratio == max(Case_Fatality_Ratio, na.rm=TRUE)) %>%
rename("Maximum_Fatality_Ratio" = "Case_Fatality_Ratio")
#creating second temporary data frame to remove any duplicate states
fatality_rate_temp2 <- fatality_rate_temp1[!duplicated(fatality_rate_temp1$Province_State),]
#creating third temporary data frame to sort by Maximum_Fatality_Ratio in descending order
fatality_rate_temp3 <- fatality_rate_temp2[order(-fatality_rate_temp2$Maximum_Fatality_Ratio),]
#creating final data frame with only the two columns "Province_State" and "Maximum_Fatality_Ratio"
state_max_fatality_rate = fatality_rate_temp3[c("Province_State","Maximum_Fatality_Ratio")]
#5
ggplot(state_max_fatality_rate,aes(x=Province_State,y=Maximum_Fatality_Ratio)) +
geom_bar()
ggplot(state_max_fatality_rate,aes(x=Province_State)) +
geom_bar()
ggplot(state_max_fatality_rate,aes(color=Province_State,y=Maximum_Fatality_Ratio)) +
geom_bar()
ggplot(state_max_fatality_rate,aes(x=Province_State,color=Maximum_Fatality_Ratio)) +
geom_bar()
ggplot(state_max_fatality_rate,aes(x=Province_State)) +
geom_bar(y=Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=Province_State)) +
geom_bar(state_max_fatality_rate,y=Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=Province_State)) +
geom_bar(data=state_max_fatality_rate,y=Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=Province_State)) +
geom_bar(y=state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=Province_State,y=Maximum_Fatality_Ratio)) +
geom_col()
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(data=A_states,
aes(x=ymd(Last_Update),
y=Deaths,
)) +
geom_point(alpha=.5,
size=.2) +
facet_wrap(~Province_State,
scales="free") +
geom_smooth(method = "lm",
se = FALSE,
) +
labs(x="DATE (year-month-day)",
y="Number of Deaths")
library(tidyverse)
#1 Read into R Data Frame
CCD <- read.csv("./Exam_1/cleaned_covid_data.csv")
A_states<- subset(CCD, grepl("^A",Province_State))
#3 Plot
class(A_states$Last_Update)
ggplot(data=A_states,
aes(x=ymd(Last_Update),
y=Deaths,
)) +
geom_point(alpha=.5,
size=.2) +
facet_wrap(~Province_State,
scales="free") +
geom_smooth(method = "lm",
se = FALSE,
) +
labs(x="DATE (year-month-day)",
y="Number of Deaths")
fatality_rate_temp1 <- CCD %>%
group_by(Province_State) %>%
filter(Case_Fatality_Ratio == max(Case_Fatality_Ratio, na.rm=TRUE)) %>%
rename("Maximum_Fatality_Ratio" = "Case_Fatality_Ratio")
#creating second temporary data frame to remove any duplicate states
fatality_rate_temp2 <- fatality_rate_temp1[!duplicated(fatality_rate_temp1$Province_State),]
#creating third temporary data frame to sort by Maximum_Fatality_Ratio in descending order
fatality_rate_temp3 <- fatality_rate_temp2[order(-fatality_rate_temp2$Maximum_Fatality_Ratio),]
#creating final data frame with only the two columns "Province_State" and "Maximum_Fatality_Ratio"
state_max_fatality_rate = fatality_rate_temp3[c("Province_State","Maximum_Fatality_Ratio")]
ggplot(state_max_fatality_rate,aes(x=Province_State,y=Maximum_Fatality_Ratio)) +
geom_col()
#5
state_max_fatality_rate
ggplot(state_max_fatality_rate,aes(x=Province_State,y=Maximum_Fatality_Ratio)) +
geom_col() +
order(Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=reorder(Province_State, +Maximum_Fatality_Ratio),y=Maximum_Fatality_Ratio)) +
geom_col() +
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,aes(x=reorder(Province_State, +Maximum_Fatality_Ratio),y=Maximum_Fatality_Ratio)) +
geom_col()
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col()
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = .1, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = 10, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=10))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=5))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=2))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=.1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust=1))
theme(axis.text.x = element_text(angle = 90)
theme(axis.text.x = element_text(angle = 90)
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
theme_bw()
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme_bw(axis.text.x = element_text(angle = 90,hjust = 1)) +
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme_bw(axis.text.x = element_text(angle = 90,hjust = 1)) +
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,hjust = 1)) +
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme_bw(axis.text.x = element_text(angle = 90,hjust = 1))
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
library(tidyverse)
#1 Read into R Data Frame
CCD <- read.csv("./Exam_1/cleaned_covid_data.csv")
A_states<- subset(CCD, grepl("^A",Province_State))
#3 Plot
class(A_states$Last_Update)
ggplot(data=A_states,
aes(x=ymd(Last_Update),
y=Deaths,
)) +
geom_point(alpha=.5,
size=.2) +
facet_wrap(~Province_State,
scales="free") +
geom_smooth(method = "lm",
se = FALSE,
) +
labs(x="DATE (year-month-day)",
y="Number of Deaths")
View(CCD)
as.factor(state_max_fatality_rate$Maximum_Fatality_Ratio)
fatality_rate_temp1 <- CCD %>%
group_by(Province_State) %>%
filter(Case_Fatality_Ratio == max(Case_Fatality_Ratio, na.rm=TRUE)) %>%
rename("Maximum_Fatality_Ratio" = "Case_Fatality_Ratio")
#creating second temporary data frame to remove any duplicate states
fatality_rate_temp2 <- fatality_rate_temp1[!duplicated(fatality_rate_temp1$Province_State),]
#creating third temporary data frame to sort by Maximum_Fatality_Ratio in descending order
fatality_rate_temp3 <- fatality_rate_temp2[order(-fatality_rate_temp2$Maximum_Fatality_Ratio),]
#creating final data frame with only the two columns "Province_State" and "Maximum_Fatality_Ratio"
state_max_fatality_rate = fatality_rate_temp3[c("Province_State","Maximum_Fatality_Ratio")]
ggplot(state_max_fatality_rate,
aes(x=reorder(Province_State, -Maximum_Fatality_Ratio),
y=Maximum_Fatality_Ratio)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90,hjust = 1))
library(tidyverse)
#1 Read into R Data Frame
CCD <- read.csv("./cleaned_covid_data.csv")
# Set input/current working directory
"./Final_Project/ASTER_data" <- 'c:/ASTER_L1T/'
ASTER_data
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/ASTER_data", 'ASTER_L1T_DEMO_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Search and create a list for all ASTER L1T files contained in the working directory:
file_names <- list.files(pattern = 'AST_L1T_.*hdf$')
file_names
# Set input/current working directory
"./Final_Project" <- 'c:/ASTER_L1T/'
# Create and set output directory
Edited_ASTER <- paste("./Final_Project", 'ASTER_L1T_DEMO_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Set input/current working directory
"./Final_Project/" <- 'c:/ASTER_L1T/'
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_DEMO_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Search and create a list for all ASTER L1T files contained in the working directory:
file_names <- list.files(pattern = 'AST_L1T_.*hdf$')
file_names
setwd("./Final_Project")
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_DEMO_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Search and create a list for all ASTER L1T files contained in the working directory:
file_names <- list.files(pattern = 'AST_L1T_.*hdf$')
file_names
# Set input/current working directory
"./Final_Project/" <- 'c:/ASTER_L1T/'
setwd("./Final_Project/Raw_ASTER")
setwd("./Raw_ASTER/")
# Set input/current working directory
"./Raw_ASTER" <- 'c:/ASTER_L1T/'
setwd("./Raw_ASTER/")
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_DEMO_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Search and create a list for all ASTER L1T files contained in the working directory:
file_names <- list.files(pattern = 'AST_L1T_.*hdf$')
file_names
# Load necessary packages into R
library(rgdal); library(raster); library(gdalUtils); library(tiff); library(colorspace); library(rmarkdown)
suppressWarnings(dir.create(Edited_ASTER))
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_Edited_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Load necessary packages into R
library(rgdal); library(raster); library(gdalUtils); library(tiff); library(colorspace); library(rmarkdown)
require(rgdal)
# Set input/current working directory
"./Raw_ASTER" <- 'c:/ASTER_L1T/'
setwd("./Raw_ASTER/")
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_Edited_output/', sep='')
# Load necessary packages into R
library(rgdal); library(raster); library(gdalUtils); library(tiff); library(colorspace); library(rmarkdown)
require(rgdal)
# Load necessary packages into R
library(rgdal); library(raster); library(gdalUtilities); library(tiff); library(colorspace); library(rmarkdown)
require(rgdal)
# Set input/current working directory
"./Raw_ASTER" <- 'c:/ASTER_L1T/'
setwd("./Raw_ASTER/")
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_Edited_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
setwd("./Raw_ASTER")
# Set input/current working directory
"./Raw_ASTER" <- 'c:/ASTER_L1T/'
# Create and set output directory
Edited_ASTER <- paste("./Final_Project/", 'ASTER_L1T_Edited_output/', sep='')
suppressWarnings(dir.create(Edited_ASTER))
# Search and create a list for all ASTER L1T files contained in the working directory:
file_names <- list.files(pattern = 'AST_L1T_.*hdf$')
file_names
#### LANDSAT Imagery ####
getwd()
file_names <- list.files(recursive = TRUE, pattern = '.TIF')
file_names
B1 = raster(file_names[1])
B2 = raster(file_names[2])
B3 = raster(file_names[3])
B4 = raster(file_names[4])
B5 = raster(file_names[5])
B6 = raster(file_names[6])
B7 = raster(file_names[7])
library(raster)
library(ggplot2)
#### LANDSAT Imagery ####
getwd()
file_names <- list.files(recursive = TRUE, pattern = '.TIF')
file_names
B1 = raster(file_names[1])
B2 = raster(file_names[2])
B3 = raster(file_names[3])
B4 = raster(file_names[4])
B5 = raster(file_names[5])
B6 = raster(file_names[6])
B7 = raster(file_names[7])
rgb = stack(red, green, blue)
hist(rgb)
rgb = stack(red, green, blue)
library(raster)
library(ggplot2)
B1 = raster(file_names[1])
B2 = raster(file_names[2])
B3 = raster(file_names[3])
B4 = raster(file_names[4])
B5 = raster(file_names[5])
B6 = raster(file_names[6])
B7 = raster(file_names[7])
rgb = stack(red, green, blue)
hist(rgb)
plotRGB(rgb, stretch="lin", scale=65535)
#### HyperSpectral Data ####
df <- read.csv("grngrass.csv")
ggplot(df,aes(x=wavelength,y=reflectance)) +
geom_line()
#### HyperSpectral Data ####
df <- read.csv("grngrass.csv")
#### HyperSpectral Data ####
df <- read.csv("grngrass.csv",recursive = TRUE)
#### HyperSpectral Data ####
df <- read.csv("grngrass.csv", recursive = TRUE)
#### HyperSpectral Data ####
df <- read.csv(path="./Final_Project/Test_Data","grngrass.csv")
library(raster)
library(ggplot2)
