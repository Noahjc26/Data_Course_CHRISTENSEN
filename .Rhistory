ggpairs(,cardinality_threshold = 33)
dat %>%
ggplot(aes(x=Visit,color=hispanic))
dat %>%
ggplot(aes(x=Visit,color=hispanic)) +
geom_path(aes(y=systolic),color='black')
View(dat)
dat %>%
ggplot(aes(x=Visit,color=hispanic)) +
geom_path(aes(y=systolic),color='black') +
geom_path(aes(y=diastolic),color='black')
View(dat)
dat %>%
ggplot(aes(x=Visit)) +
geom_path(aes(y=systolic),color='black') +
geom_path(aes(y=diastolic),color='black') +
facet_wrap(~hispanic)
dat %>%
ggplot(aes(x=Visit)) +
geom_path(aes(y=systolic),color='red') +
geom_path(aes(y=diastolic),color='black') +
facet_wrap(~hispanic)
dat %>%
ggplot(aes(x=Visit)) +
geom_point(aes(y=systolic),color='red') +
geom_point(aes(y=diastolic),color='black') +
facet_wrap(~hispanic)
View(dat)
#df %>%
#pivot_longer(starts_with("bp_"),
#            values_to = "bp") %>%
#mutate(Visit = case_when(name == "bp_8" ~ 1,
#                       name == "bp_10" ~ 2,
#                       name == "bp_12" ~ 3)) %>%
#  pivot_longer(starts_with("hr_"),
#              names_to = "visit2",
#             values_to = "heart_rate")
bp <-
df %>%
select(-starts_with("hr_")) %>% #for picking columns
pivot_longer(starts_with("bp_"),
values_to = "bp") %>%
mutate(Visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"),convert = TRUE) #(convert) turning them into numeric values
#df %>%
#pivot_longer(starts_with("bp_"),
#            values_to = "bp") %>%
#mutate(Visit = case_when(name == "bp_8" ~ 1,
#                       name == "bp_10" ~ 2,
#                       name == "bp_12" ~ 3)) %>%
#  pivot_longer(starts_with("hr_"),
#              names_to = "visit2",
#             values_to = "heart_rate")
bp <-
df %>%
select(-starts_with("hr_")) %>% #for picking columns
pivot_longer(starts_with("bp_"),
values_to = "bp") %>%
mutate(Visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE) #(convert) turning them into numeric values
path <- "./Data/messy_bp.xlsx"
visits <- read_xlsx(path, skip = 2, n_max = 0) %>% names()# skipping 2 rows and setting max number of rows to 1
df <- read_xlsx(path, range = "A4:M24") %>%
clean_names()
#df %>%
#pivot_longer(starts_with("bp_"),
#            values_to = "bp") %>%
#mutate(Visit = case_when(name == "bp_8" ~ 1,
#                       name == "bp_10" ~ 2,
#                       name == "bp_12" ~ 3)) %>%
#  pivot_longer(starts_with("hr_"),
#              names_to = "visit2",
#             values_to = "heart_rate")
bp <-
df %>%
select(-starts_with("hr_")) %>% #for picking columns
pivot_longer(starts_with("bp_"),
values_to = "bp") %>%
mutate(Visit = case_when(name == "bp_8" ~ 1,
name == "bp_10" ~ 2,
name == "bp_12" ~ 3)) %>%
select(-name) %>%
separate(bp, into = c("systolic","diastolic"), convert = TRUE) #(convert) turning them into numeric values
hr <-
df %>%
select(-starts_with("bp_")) %>%
pivot_longer(starts_with("hr_"),
values_to = "hr") %>%
mutate(Visit = case_when(name == "hr_9" ~ 1,
name == "hr_11" ~ 2,
name == "hr_13" ~ 3)) %>%
select(-name)
dat <-
full_join(bp,hr) #joining by all the ones in common
dat <-
dat %>%
mutate(birthdate = paste(year_birth,
month_of_birth,
day_birth,
sep="-") %>%
as.POSIXct()) #posixct is turning it into an actual date
saveRDS(dat,"./Code_Examples/cleaned_bp.rds") #r data structure file, saves df and stuff in environment
dat <- readRDS("./Code_Examples/cleaned_bp.rds")
names(dat)
dat %>%
ggplot(aes(x=Visit)) +
geom_point(aes(y=systolic),color='red') +
geom_point(aes(y=diastolic),color='black') +
facet_wrap(~hispanic)
dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race)) #making it so it keeps all other stuff the same
dat <- dat %>%
mutate(race = case_when(race == "WHITE" ~ "White",
race == "Caucasian" ~ "White",
TRUE ~ race)) #making it so it keeps all other stuff the same
saveRDS(dat,"./Code_Examples/cleaned_bp.rds") #r data structure file, saves df and stuff in environment
dat <- readRDS("./Code_Examples/cleaned_bp.rds")
names(dat)
dat %>%
ggplot(aes(x=Visit)) +
geom_point(aes(y=systolic),color='red') +
geom_point(aes(y=diastolic),color='black') +
facet_wrap(~hispanic)
dat %>%
group_by(race) %>%
summarize(mean_bp = mean(systolic))
dat %>%
group_by(race,sex) %>%
summarize(mean_bp = mean(systolic))
library(tidyverse)
#lists
a <- 1:10
b <- letters
c <- c(TRUE,TRUE,FALSE)
list(a,b,c)
x <- list(a,b,c)
x[[1]]
x[[1]][3] #single square bracket give element inside element of list
x[1]
x[[x]][1]
x[[]][1]
x[[1:3]][1]
x[1:3][1]
x[[1:3]][1]
x[[1:3]]
print(x[[i]][1])
for (i in 1:3) {
print(x[[i]][1])
}
lapply(x, [1])
lapply(x, [[1]])
lapply(x, [1])
lapply(x,print[1])
lapply(x,print(x[1]))
library(tidyverse)
library(purrr)
map(x,1)
map_chr(x,1)
y <- list(a=iris,
b=mtcars)
map(y,class)
map(x,class)
y
map(y,class)
map(x,class)
#function that takes frist and second columns and multiplies them and makes new col named "products"
y[[1]][,1] %>%
#function that takes frist and second columns and multiplies them and makes new col named "products"
y[[1]][,1] * y[[1]][,2]
#function that takes frist and second columns and multiplies them and makes new col named "products"
y[[1]][,1]
#function that takes frist and second columns and multiplies them and makes new col named "products"
y[[1]][,1] * y[[1]][,2]
#function that takes frist and second columns and multiplies them and makes new col named "products"
newcol <- y[[1]][,1] * y[[1]][,2]
y[["products"]] <- newcol
y[[1]]["products"] <- newcol
newcol <- y[[x]][,1] * y[[x]][,2]
newcol <- x[,1] * x[,2]
make_products <-
function(x){
newcol <- x[,1] * x[,2]
x["products"] <- newcol
}
return(x)
make_products <-
function(x){
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
lapply(iris,as.character)
y <- list(a=iris, #creating a list of dataframes
b=mtcars)
make_products <-
function(x){
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
y$a$Sepal.Length <- as.character(y$a$Sepal.Length) #digging into list through dollar signs then changing to character
make_products <-
function(x){
if(is.numeric(x[,1])){
stop("Hey idiot, that first column is not numeric. Try again.")
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
make_products <-
function(x){
if(is.numeric(x[,1])){
stop("Hey idiot, that first column is not numeric. Try again.")
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
make_products <-
function(x){
if(is.numeric(x[,1])){
stop("Hey idiot, that first column is not numeric. Try again.")
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
y$a$Sepal.Length <- as.character(y$a$Sepal.Length) #digging into list through dollar signs then changing to character
map(y,make_products)
make_products <-
function(x){
if(is.numeric(x[,1])){
stop("Hey idiot, that first column is not numeric. Try again.")
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
make_products <-
function(x){
if(!is.numeric(x[,1])){
# stop("Hey idiot, that first column is not numeric. Try again.")
x[,1] <- an.numeric(x[,1])
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
make_products <-
function(x){
if(!is.numeric(x[,1])){
# stop("Hey idiot, that first column is not numeric. Try again.")
x[,1] <- as.numeric(x[,1])
}
newcol <- x[,1] * x[,2]
x["products"] <- newcol
return(x)
}
map(y,make_products)
library(tidyverse)
mpg %>% names
mpg %>%
ggplot(aes(x=displacement,y=highway)) +
geom_smooth(lm)
mpg %>%
ggplot(aes(x=displ,y=hwy)) +
geom_smooth(lm)
mpg %>%
ggplot(aes(x=displ,y=hwy)) +
geom_smooth(metho='lm')
mpg %>%
ggplot(aes(x=displ,y=hwy)) +
geom_smooth(method='lm')
mpg$hwy %>% mean
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_smooth(method='lm')
glm(data = mpg,
formula = hwy ~ displ)
summary(m)
#generalized linear model regression using mpg data frame, hwy as a function of displacement
m <- glm(data = mpg,
formula = hwy ~ displ)
summary(m)
#generalized linear model regression using mpg data frame, hwy as a function of displacement
m <- glm(data = mpg,
formula = hwy ~ displ + factor(cyl))
summary(m)
m$coefficients
install.packages("modelr")
library(modelr)
add_prediction()
m %>%
add_prediction()
preds <- add_prediction(mpg,m)
preds <- add_prediction(mpg,m)
library(modelr)
preds <- add_prediction(mpg,m)
preds <- add_predictions(mpg,m)
View(preds)
preds(pred)
pred(preds)
library(tidyverse)
library(palmerpenguins)
penguins %>%
ggplot(aes(x=bill_depth_mm,y=bill_length_mm)) +
geom_point() +
geom_smooth(method = 'lm')
#linear regression for this
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm)
#linear regression for this
glm(data = penguins,
formula = bill_length_mm ~ bill_depth_mm)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm)) +
geom_point() +
geom_smooth(method = 'lm')
#linear regression for this
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm)
#linear regression for this
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm) %>%
summary
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm)) +
geom_point() +
geom_smooth(method = 'lm') +
coord_cartesian(xlim = 0,60)
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm)) +
geom_point() +
geom_smooth(method = 'lm') +
coord_cartesian(xlim = c(0,60))
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method = 'lm')
#linear regression for this, could also use "aov" in place of "glm"
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species) %>%
summary
#linear regression for this, could also use "aov" in place of "glm"
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species) %>%
summary
#linear regression for this, could also use "aov" in place of "glm"
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species) %>%
summary
#linear regression for this, could also use "aov" in place of "glm"
glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species) %>%
summary
#linear regression for this, could also use "aov" in place of "glm"
mod1 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species) %>%
summary
grid <- penguins %>%
data_grid(bill_length_mm, bill_depth_mm) %>%
gather_predictions(mod1)
penguins %>%
ggplot(aes(x=bill_length_mm, y=bill_depth_mm, colour = species)) +
geom_line(data = grid, aes(y = pred),size=1.25)
library(modelr)
grid <- penguins %>%
data_grid(bill_length_mm, bill_depth_mm) %>%
gather_predictions(mod1)
penguins %>%
ggplot(aes(x=bill_length_mm, y=bill_depth_mm, colour = species)) +
geom_line(data = grid, aes(y = pred),size=1.25)
grid <- penguins %>%
data_grid(bill_length_mm, bill_depth_mm) %>%
gather_predictions(mod1)
View(mod1)
mod1 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm) %>%
summary
#linear regression for this, could also use "aov" in place of "glm"
mod2 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species) %>%
summary
#multiply sign allows for individual y=mx+b for each species
mod3 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species) %>%
summary
mod1$aic
library(easystats)
install.packages("easystats")
library(easystats)
#smaller aic the better your model is capturing reality
mod1$aic
mod3$aic
mod2$aic
compare_parameters(mod1,mod2,mod3)
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
compare_parameters(mod1,mod2,mod3)
compare_parameters(c(mod1,mod2,mod3))
compare_parameters(mod1,mod2,mod3)
mod1 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm)
#linear regression for this, could also use "aov" in place of "glm"
mod2 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species)
#multiply sign allows for individual y=mx+b for each species
mod3 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species)
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
compare_parameters(mod1,mod2,mod3)
compare_performance(mod1,mod2,mod3)
compare_performance(mod1,mod2,mod3) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species * sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species *\+ sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~sex)
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex + island)
mod4$aic
mod3$aic
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
mod4$aic
#mod4 is much better than the rest
compare_performance(mod1,mod2,mod3,mod4) %>% plot
compare_performance(mod1,mod2,mod3,mod4)
penguins
formula(mod4)
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex + island)
formula(mod4)
data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
)
data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
island = "Dream")
x <- data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
island = "Dream")
predict(mod4,newdata = x)
island = c("Dream","Dream")
x <- data.frame(bill_length_mm = c(5000,100),
species = c("Adelie","Chinstrap"),
sex = c("male","male"),
island = c("Dream","Dream"))
predict(mod4,newdata = x)
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
y <- data.frame(displ = 500)
mod5 <- glm(data=mpg,formula = hwy ~ displ)
predict(mod5,y)
mpg %>%
ggplot(aes(x=log(displ),y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
mpg %>%
ggplot(aes(x=poly(displ,2),y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
mod5 <- glm(data=mpg,formula = hwy ~ log(displ)
mod5 <- glm(data=mpg,formula = hwy ~ log(displ))
predict(mod5,y)
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm',formula = y~ log(x))
predict(mod5,y)
y <- data.frame(displ = 500)
mod5 <- glm(data=mpg,formula = hwy ~ log(displ))
predict(mod5,y)
10^predict(mod5,y)
