nums <- c(1,1,2,2,2,2,3,3,3,4,4,4,4,4,4,4,5,6,7,8,9)
class(nums) # make sure it's numeric
# convert to a factor
as.factor(nums) # show in console
class(nums_factor) # check it
class(nums_factor) # check it
nums_factor <- as.factor(nums) #assign it to a new object as a factor
class(nums_factor) # check it
levels(nums_factor)
# convert numeric to character
as.character(vector1)
as.character(vector1) + 5
# convert character to numeric
as.numeric(vector3)
as.numeric("1",vector3)
as.numeric("1",vector3)
as.numeric(c("1",vector3))
#check it out
plot(nums)
plot(nums_factor)
max(vector1)
min(vector1)
median(vector1)
mean(vector1)
range(vector1)
summary(vector1)
class(summary(vector1))
table(nums)
# cumulative functions
cumsum(vector1)
cumprod(vector1)
cummin(vector1)
cummax(vector1)
# even has built-in statistical distributions (we will see more of these later)
dbinom(50,100,.5) # probability of getting exactly 50 heads out of 100 coin flips
# even has built-in statistical distributions (we will see more of these later)
dbinom(50,100,.7) # probability of getting exactly 50 heads out of 100 coin flips
# even has built-in statistical distributions (we will see more of these later)
dbinom(50,100,.4) # probability of getting exactly 50 heads out of 100 coin flips
# even has built-in statistical distributions (we will see more of these later)
dbinom(51,100,.5) # probability of getting exactly 50 heads out of 100 coin flips
seq(2,150,2) # here's the code to get a list of the even numbers between 2 and 150
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
even_iris <- seq(iris,2)
seq(3,150,2) # here's the code to get a list of the even numbers between 2 and 150
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
even_iris <- seq(0,iris,2)
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
seq(0,iris,2)
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
seq(0,2)
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
seq(0,2,.5)
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
(row(iris,seq(0,150,2))
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
(row(iris,seq(0,150,2))
# 1.  Get a subset of the "iris" data frame where it's just even-numbered rows
row(iris,seq(2,150,2))
row(iris,seq(2,150,2))
iris[seq(2,150,2)]
iris[seq(2,150,2),5]
iris[seq(2,150,2),2]
iris[seq(2,150,2),1:5]
iris[seq(2,150,2),]
iris_chr <- as.character(iris)
Sepal.Area = Sepal.Width*Sepal.Length
Sepal.Area <-  Sepal.Width*Sepal.Length
Sepal.Area = dat$Sepal.Width*dat$Sepal.Length
class(Sepal.Area)
iris$Sepal.Area <- dat$Sepal.Length*dat$Sepal.Width
View(iris)
iris_chr <- as.character(iris)
big_area_iris <- iris$Sepal.Area>20
big_area_iris <- as.data.frame(iris$Sepal.Area>20)
View(big_area_iris)
iris_chr <- as.data.frame(as.character(iris))
View(iris_chr)
big_area_iris <- as.data.frame[iris$Sepal.Area>20]
big_area_iris <- as.data.frame(iris[Sepal.Area>20])
big_area_iris <- iris[Sepal.Area>20]
big_area_iris <- iris[Sepal.Area>20,]
View(big_area_iris)
class(Sepal.Area)
Sepal.Area = dat$Sepal.Width*dat$Sepal.Length
iris_chr <-(as.character(iris)
iris_chr <- (as.character(iris))
iris_chr <- (as.character(iris))
iris_chr
iris_chr <- iris
###########################
#                         #
#    Assignment Week 3    #
#                         #
###########################
# Instructions ####
# Fill in this script with stuff that we do in class.
# It might be a good idea to include comments/notes as well so you remember things we talk about
# At the end of this script are some comments with blank space after them
# They are plain-text instructions for what you need to accomplish.
# Your task is to write the code that accomplished those tasks.
# Then, make sure to upload this to both Canvas and your GitHub repository
rep(seq(1,1000, by=2), 100)
# Vector operations! ####
# Vectors are 1-dimensional series of values in some order
1:10 # ':' only works for integers
letters # built-in pre-made vector of a - z
vector1 <- c(1,2,3,4,5,6,7,8,9,10)
vector2 <- c(5,6,7,8,4,3,2,1,3,10)
vector3 <- letters # letters and LETTERS are built-in vectors
vector1[3] + 5 #bracket selects the third value
vector2[2] / 2 #bracket selects the second value
vector1*vector2
vector3 + 1 # can't add 1 to "a"
View(iris_chr)
###########################
#                         #
#    Assignment Week 3    #
#                         #
###########################
# Instructions ####
# Fill in this script with stuff that we do in class.
# It might be a good idea to include comments/notes as well so you remember things we talk about
# At the end of this script are some comments with blank space after them
# They are plain-text instructions for what you need to accomplish.
# Your task is to write the code that accomplished those tasks.
# Then, make sure to upload this to both Canvas and your GitHub repository
rep(seq(1,1000, by=2), 100)
# Vector operations! ####
# Vectors are 1-dimensional series of values in some order
1:10 # ':' only works for integers
letters # built-in pre-made vector of a - z
vector1 <- c(1,2,3,4,5,6,7,8,9,10)
vector2 <- c(5,6,7,8,4,3,2,1,3,10)
vector3 <- letters # letters and LETTERS are built-in vectors
vector1[3] + 5 #bracket selects the third value
vector2[2] / 2 #bracket selects the second value
vector1*vector2
vector3 + 1 # can't add 1 to "a"
iris[seq(2,150,2),]
seq(2,150,2) # here's the code to get a list of the even numbers between 2 and 150
iris_chr <- iris
iris_chr$Sepal.Length <- as.character((iris$Sepal.Length))
class(iris_chr)
class(iris_chr$Sepal.Length)
class(iris$Sepal.Length)
iris_chr$Sepal.Width <- as.character(iris$Sepal.Length)
iris_chr$Petal.Length <- as.character(iris$Petal.Length)
iris_chr$Petal.Width <- as.character(iris$Petal.Width)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
iris_chr$Species <- as.character(iris$Species)
class(iris_chr$Species)
iris_chr_for_loop <- iris
for(i in bfiles) {
print(readLines(i,n=1))
} #i is just "iteration"
#### Assignment 2 ####
#root "/"
# the current directory "."
#The directory above the current one ".."
list.files(path="Data")
csv_files <- list.files(path="Data",
full.names = TRUE,
pattern = ".csv") # option minus for <-
length(csv_files)
?length     # the question mark goes to the 'Help' tab
df <- read.csv("./Data/wingspan_vs_mass.csv")  # df = data frame
head(df,n=5)    #head shows first 6 lines, n specifies the number of lines)
bfiles <- list.files(path="Data",
recursive = TRUE,
full.names=TRUE,
pattern = "^b") #finds all files that start with b
bfiles
for(i in bfiles) {
print(readLines(i,n=1))
} #i is just "iteration"
for(i in csv_files) {
print(readLines(i,n=1))
}
for(i in bfiles) {
print(readLines(i,n=1))
} #i is just "iteration"
for (i in iris) {
iris_chr_for_loop$i <- as.character(i)
}
View(iris_chr_for_loop)
for (i in iris) {
iris_chr_for_loop$i <- as.character(iris)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr <- iris
iris_chr$Sepal.Length <- as.character((iris$Sepal.Length))
iris_chr$Sepal.Width <- as.character(iris$Sepal.Length)
iris_chr$Petal.Length <- as.character(iris$Petal.Length)
iris_chr$Petal.Width <- as.character(iris$Petal.Width)
iris_chr$Species <- as.character(iris$Species)
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris) {
iris_chr_for_loop$i <- as.character(iris$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris) {
iris_chr_for_loop$i <- as.character(iris$i)
}
iris_chr_for_loop$i <- as.character(iris)
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris)
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
iris_chr_for_loop <- as.character(iris$i)
}
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
iris_chr <- iris
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
iris_chr$Sepal.Width <- as.character(iris$Sepal.Length)
iris_chr$Petal.Length <- as.character(iris$Petal.Length)
iris_chr$Petal.Width <- as.character(iris$Petal.Width)
iris_chr$Species <- as.character(iris$Species)
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris$i) {
iris_chr_for_loop$i <- as.character(iris$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris) {
iris_chr_for_loop$i <- as.character(i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris) {
iris_chr_for_loop <- as.character(i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris) {
iris_chr_for_loop <- as.character(i)
}
for (i in iris) {
data.frame(iris_chr_for_loop) <- as.character(i)
}
for (i in iris) {
data.frame <- (iris_chr_for_loop) <- as.character(i)
}
for (i in iris) {
data.frame <- iris_chr_for_loop <- as.character(i)
}
for (i in iris) {
iris_chr_for_loop$x <- as.character(i$x)
}
for (i in iris) {
iris_chr_for_loop$x <- as.character(x)
}
for (i in iris) {
iris_chr_for_loop$x <- as.character(i$x)
}
for (i in iris) {
iris_chr_for_loop$x <- as.character(x$i)
}
for (i in iris) {
x <- iris$i
iris_chr_for_loop <- as.character(x)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris) {
x <- iris$i
iris_chr_for_loop <- as.character(iris$x)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris) {
x <- iris$i
iris_chr_for_loop <- as.character(iris$x)
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
x <- iris$i
iris_chr_for_loop <- as.character(iris$x)
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
x <- iris$i
iris_chr_for_loop$i <- as.character(iris$x)
}
for (i in iris_chr_for_loop) {
x <- iris$i
iris_chr_for_loop$x <- as.character(iris$x)
}
for (i in iris_chr_for_loop) {
x <- iris$i
iris_chr_for_loop <- as.character(iris$x)
}
iris_chr_for_loop <- iris
for (i in col(iris)) {
iris_chr_for_loop <- as.character(iris$i)
}
iris_chr_for_loop <- iris
for (i in iris) {
iris_chr_for_loop <- as.character(col(iris$i))
}
?for (i in iris) {
iris_chr_for_loop <- as.character(col(iris$i))
}
?for (i in iris_chr_for_loop) {
iris_chr_for_loop <- as.character(col(iris$i))
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris_chr_for_loop) {
iris_chr_for_loop <- as.character(iris$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris_chr_for_loop) {
iris_chr_for_loop[[i]] <- as.character[[i]]
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris_chr_for_loop) {
iris_chr_for_loop[[i]] <- as.character(iris[[i]])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris_chr_for_loop) {
iris_chr_for_loop[i] <- as.character(iris[i])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris) {
iris_chr_for_loop[i] <- as.character(iris[i])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris) {
iris_chr_for_loop[i] <- character(iris[i])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
?for (i in iris) {
iris_chr_for_loop[i] <- factor(iris[i])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris) {
iris_chr_for_loop[i] <- factor(iris[i])
}
# OR
iris
iris_chr_for_loop <- iris
for (i in iris) {
iris_chr_for_loop[i] <- (iris[i])
}
for (i in iris) {
iris_chr_for_loop[i] <- (iris[i,])
}
for (i in iris) {
iris_chr_for_loop[i] <- (iris[,i])
}
for (i in iris) {
iris_chr_for_loop[i,] <- (iris[,i])
}
for (i in iris) {
iris_chr_for_loop[[i]] <- (iris[[i]])
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop[[i]] <- (iris[[i]])
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop[[i]] <- factor(iris[[i]])
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop[[i]] <- as.character(iris[[i]])
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop[i] <- as.character(iris[i])
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
iris_chr_for_loop[i] <- as.character(iris[i])
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris$i)
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris_chr_for_loop$i)
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop <- as.character(iris_chr_for_loop$i)
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop <- as.character(iris_chr_for_loop)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
iris_chr_for_loop <- iris
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris_chr_for_loop) {
as.character(col(iris_chr_for_loop))
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris_chr_for_loop) {
as.character(col(iris_chr_for_loop$i))
}
for (i in iris_chr_for_loop) {
as.character(iris_chr_for_loop$i)
}
for (i in iris_chr_for_loop) {
print(class(i))
}
for (i in iris_chr_for_loop) {
iris_chr_for_loop$i <- as.character(iris_chr_for_loop$i)
}
for (i in col(iris_chr_for_loop)) {
iris_chr_for_loop$i <- as.character(iris_chr_for_loop$i)
}
for (i in (iris_chr_for_loop[1:5]) {
for (i in (iris_chr_for_loop[1:5,) {
for (i in 1:5) {
iris_chr_for_loop$i <- as.character(iris_chr_for_loop$i)
}
for (i in 1:5) {
iris_chr_for_loop <- as.character(iris_chr_for_loop$i)
}
iris_chr_for_loop <- iris
big_area_iris <- iris[Sepal.Area>20,]
Sepal.Area = dat$Sepal.Width*dat$Sepal.Length
Sepal.Area = iris$Sepal.Width*iris$Sepal.Length
class(Sepal.Area)
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
big_area_iris <- iris[Sepal.Area>20,]
iris[seq(2,150,2),]
seq(2,150,2) # here's the code to get a list of the even numbers between 2 and 150
iris_chr <- iris
iris_chr$Sepal.Length <- as.character(iris$Sepal.Length)
iris_chr$Sepal.Width <- as.character(iris$Sepal.Length)
iris_chr$Petal.Length <- as.character(iris$Petal.Length)
iris_chr$Petal.Width <- as.character(iris$Petal.Width)
iris_chr$Species <- as.character(iris$Species)
class(iris_chr$Sepal.Length)
class(iris_chr$Sepal.Width)
class(iris_chr$Petal.Length)
class(iris_chr$Petal.Width)
class(iris_chr$Species)
iris_chr_for_loop <- iris
for (i in 1:ncol(iris_chr_for_loop)) {
iris_chr_for_loop[,i] <- as.character(iris_chr_for_loop[,i])
}
for (i in iris_chr_for_loop) {
print(class(i))
}
Sepal.Area = iris$Sepal.Width*iris$Sepal.Length
class(Sepal.Area)
iris$Sepal.Area <- iris$Sepal.Length*iris$Sepal.Width
big_area_iris <- iris[Sepal.Area>20,]
