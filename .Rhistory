formula = bill_depth_mm ~ bill_length_mm * species) %>%
summary
mod1$aic
library(easystats)
install.packages("easystats")
library(easystats)
#smaller aic the better your model is capturing reality
mod1$aic
mod3$aic
mod2$aic
compare_parameters(mod1,mod2,mod3)
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
compare_parameters(mod1,mod2,mod3)
compare_parameters(c(mod1,mod2,mod3))
compare_parameters(mod1,mod2,mod3)
mod1 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm)
#linear regression for this, could also use "aov" in place of "glm"
mod2 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species)
#multiply sign allows for individual y=mx+b for each species
mod3 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species)
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
compare_parameters(mod1,mod2,mod3)
compare_performance(mod1,mod2,mod3)
compare_performance(mod1,mod2,mod3) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species * sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species *\+ sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
compare_performance(mod1,mod2,mod3,mod4) %>% plot
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~sex)
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex + island)
mod4$aic
mod3$aic
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex)
mod4$aic
#mod4 is much better than the rest
compare_performance(mod1,mod2,mod3,mod4) %>% plot
compare_performance(mod1,mod2,mod3,mod4)
penguins
formula(mod4)
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex + island)
formula(mod4)
data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
)
data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
island = "Dream")
x <- data.frame(bill_length_mm = 5000,
species = "Adelie",
sex = "male",
island = "Dream")
predict(mod4,newdata = x)
island = c("Dream","Dream")
x <- data.frame(bill_length_mm = c(5000,100),
species = c("Adelie","Chinstrap"),
sex = c("male","male"),
island = c("Dream","Dream"))
predict(mod4,newdata = x)
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
y <- data.frame(displ = 500)
mod5 <- glm(data=mpg,formula = hwy ~ displ)
predict(mod5,y)
mpg %>%
ggplot(aes(x=log(displ),y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
mpg %>%
ggplot(aes(x=poly(displ,2),y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm')
mod5 <- glm(data=mpg,formula = hwy ~ log(displ)
mod5 <- glm(data=mpg,formula = hwy ~ log(displ))
predict(mod5,y)
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm',formula = y~ log(x))
predict(mod5,y)
y <- data.frame(displ = 500)
mod5 <- glm(data=mpg,formula = hwy ~ log(displ))
predict(mod5,y)
10^predict(mod5,y)
library(tidyverse)
library(palmerpenguins)
library(modelr)
library(easystats)
penguins
penguins %>%
ggplot(aes(y=bill_depth_mm,x=bill_length_mm,color=species)) +
geom_point() +
geom_smooth(method = 'lm') +
facet_wrap(~sex)
# coord_cartesian(xlim = c(0,60))
mod1 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm)
#linear regression for this, could also use "aov" in place of "glm"
mod2 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm + species)
#multiply sign allows for individual y=mx+b for each species
mod3 <- glm(data = penguins,
formula = bill_depth_mm ~ bill_length_mm * species)
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
compare_performance(mod1,mod2,mod3) %>% plot
#adding sex as a comparison
mod4 <- glm(data=penguins,
formula= bill_depth_mm ~ bill_length_mm * species + sex + island)
#mod4 is much better than the rest
compare_performance(mod1,mod2,mod3,mod4) %>% plot
formula(mod4)
x <- data.frame(bill_length_mm = c(5000,100),
species = c("Adelie","Chinstrap"),
sex = c("male","male"),
island = c("Dream","Dream"))
predict(mod4,newdata = x)
mpg %>%
ggplot(aes(x=displ,y=hwy,color=factor(cyl))) +
geom_point() +
geom_smooth(method='lm',formula = y~ log(x))
y <- data.frame(displ = 500)
mod5 <- glm(data=mpg,formula = hwy ~ log(displ))
10^predict(mod5,y)
#predicting binary outcomes (true,false) instead of continuous data
#logistic regression (outcome is true false)
df <- read.csv("../Data/GradSchool_Admissions.csv")
#logistic regression (outcome is true false)
df <- read.csv("./Data/GradSchool_Admissions.csv")
df <- df %>%
mutate(admit = as.logical(admit))
#logistic -> family = 'binomial'
mod6 <- glm(data = df, formula = admit ~ gre + gpa + rank,
family = 'binomial')
summary(mod6)
add_predictions(df,mod6,type='response') %>%
ggplot(aes(x=gpa,y=pred,color=factor(rank))) +
geom_smooth()
#logistic -> family = 'binomial'
mod6 <- glm(data = df, formula = admit ~ gre * gpa * rank,
family = 'binomial')
summary(mod6)
add_predictions(df,mod6,type='response') %>%
ggplot(aes(x=gpa,y=pred,color=factor(rank))) +
geom_smooth()
mod7 <- glm(data = df, formula = admit ~ gre + gpa + rank,
family = 'binomial')
compare_performance(mod6,mod7)
compare_performance(mod6,mod7) %>% plot
library(MASS)
#feed largest most complicated model and it will find the best one
step <- stepAIC(mod6)
step$formula
modbest <- glm(data = df,family = "binomial",formula=step$formula)
compare_performance(mod6,mod7,modbest)
compare_performance(mod6,mod7,modbest) %>% plot
penguins
mod4 <- glm(data = penguins,
formula = bill_length_mm ~ species * sex * body_mass_g * flipper_length_mm * bill_depth_mm * island)
pbest <- stepAIC(mod4)
modbest <- glm(data = penguins,family = "binomial",formula=pbest$formula)
modbest <- glm(data = penguins,formula=pbest$formula)
modbest
pbest$formula
compare_performance(mod2,mod3,mod4,mod1,modbest) %>% plot
mod4 <- glm(data = penguins,
formula = bill_length_mm ~ species * sex * body_mass_g * flipper_length_mm * bill_depth_mm * island * year)
mod4 <- glm(data = penguins,
formula = bill_length_mm ~ species * sex * body_mass_g * flipper_length_mm * bill_depth_mm * island * year)
pbest <- stepAIC(mod4)
pbest$formula
pbest$formula
modbest <- glm(data = penguins,formula=pbest$formula)
compare_performance(mod2,mod3,mod4,mod1,modbest) %>% plot
full_mod <- glm(data=penguins,
formula = bill_length_mm ~ .^2)
pbest <- stepAIC(full_mod)
pbest$formula
modbest <- glm(data = penguins,formula=pbest$formula)
compare_performance(mod2,mod3,mod4,mod1,modbest) %>% plot
pbest$formula
modbest <- glm(data = penguins,formula=pbest$formula)
compare_performance(mod2,mod3,mod4,mod1,modbest) %>% plot
compare_performance(full_mod,modbest) %>% plot
full_mod$aic
#smaller aic the better your model is capturing reality
mod1$aic
mod2$aic
mod3$aic
modbest$aic
dim(penguins)
rbinom(10,1,.5)
rbinom(10,2,.5)
rbinom(10,6,(1/6))
rbinom(nrow(penguins),1,.8)
penguins <- penguins %>%
mutate(newcol = rbinom(nrow(penguins),1,.8))
test <- penguins %>% filter(newcol == 0)
train <- penguins %>% filter(newcol == 1)
test <- penguins %>% filter(newcol == 0)
#make model
mod_best <- glm(data=train, formula = pbest$formula)
penguins
#test model on test set
predictions <-
add_predictions(test,mod_best)
predictions
predictions %>%
mutate(resid = abs(pred - bill_length_mm))
#calculating the absolute difference between the actual and prediction
predictions <- predictions %>%
mutate(resid = abs(pred - bill_length_mm))
mean(predictions$resid)
mean(predictions$resid,na.rm = TRUE)
mean_err <- mean(predictions$resid,na.rm = TRUE)
install.packages("ranger")
library(rangerx)
library(ranger)
ranger(Species ~ ., data = iris)
ranger(Species ~ .^2,data = iris)
ranger(Species ~ ., data = iris) %>% plot
ranger_mod <- ranger(Species ~ ., data = iris)
pred <- predict(ranger_mod,iris)
pred
data.frame(iris$Species,pred$predictions)
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
library(tidyverse)
library(janitor)
library(ggpmisc)
library(devtools)
library(dplyr)
library(ggpubr)
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
x <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
x
x <- x %>%
ggplot(aes(y=x36ar_40ar,x=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
x
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
x <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
x
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
x <- x %>%
ggplot(aes(y=x36ar_40ar,x=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
x
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
x <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
x
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
p <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
summary(x)
summary(x$x39ar_40ar)
sd(x$x39ar_40ar)
sd(x$x36ar_40ar)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
x %>% names
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$apparent_age < 39000000 | x$apparent_age ? 38000000)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$apparent_age < 39000000 | x$apparent_age ? 38000000)
x2 <- subset(x, x$apparent_age < 39000000 & x$apparent_age ? 38000000)
x2 <- subset(x, x$apparent_age < 39000000)
x2 <- subset(x2, x$apparent_age > 38000000)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 90)
x2 <- subset(x2, x$x39ar_released > 8)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 95)
x2 <- subset(x2, x$x39ar_released > 6)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 97)
x2 <- subset(x2, x$x39ar_released > 6)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 98)
x2 <- subset(x2, x$x39ar_released > 6)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 99)
x2 <- subset(x2, x$x39ar_released > 6)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x2, x$x39ar_released > 4)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
x2 <- subset(x, x$x39ar_released < 99)
x2 <- subset(x2, x$x39ar_released > 2)
p <- x %>%
ggplot(aes(x=x39ar_released,y=apparent_age)) +
geom_line() +
geom_line(data = x2, aes(x=x39ar_released, y=apparent_age), color="red") +
theme_bw() +
labs(x= "% of 39Ar Released",
y= "Apparent Age (years)",
title = "Age Spectrum")
p
summary(x2$apparent_age)
sd(x2$apparent_age)
sd(x2$apparent_age)
sd(x2$apparent_age,na.rm=TRUE)
summary(x2$apparent_age)
sd(x2$apparent_age,na.rm=TRUE)
ggsave("../../age_spectrum_1_hw2_isotope.png",p)
ggsave("../age_spectrum_1_hw2_isotope.png",p)
#   Part 2 D)
x <- read.delim(pipe("pbpaste")) %>%
clean_names()
p <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
sd(x$x36ar_40ar)
p
ggsave("../inverse_isochron_1_hw2_isotope.png",p)
p <- x %>%
ggplot(aes(y=x36ar_40ar,x=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
sd(x$x36ar_40ar)
p
p <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
sd(x$x36ar_40ar)
p <- x %>%
ggplot(aes(x=x36ar_40ar,y=x39ar_40ar)) +
geom_smooth(method = 'lm',se=FALSE) +
stat_regline_equation(label.x=0.000009) +
theme_bw() +
labs( x= "36Ar/40Ar",
y= "39Ar/40Ar",
title = "Inverse Isochron")
sd(x$x36ar_40ar)
p
ggsave("../inverse_isochron_1_hw2_isotope.png",p)
